<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>version control on INBO Tutorials</title>
    <link>https://inbo.github.io/tutorials/categories/version-control/</link>
    <description>Recent content in version control on INBO Tutorials</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://inbo.github.io/tutorials/categories/version-control/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Applying the INBO corporate identity to bookdown documents</title>
      <link>https://inbo.github.io/tutorials/tutorials/r_inbomd/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/r_inbomd/</guid>
      <description>During this workshop you learn how to turn a regular Rmarkdown file into a bookdown document using the INBO corporate identity. A lot of tips and trics use plain bookdown. So you can use them with other bookdown output formats.
The slides are available on the INBOmd examples website.
The source code is avalaible in the INBOmd example GitHub repository.</description>
    </item>
    
    <item>
      <title>Git(hub) introduction</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_introduction/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_introduction/</guid>
      <description>At INBO, people do write code and require version control. As git is not the most straightforward environment to work with for non-IT specialists, we try to define our own sub-ecosystem with relevant practices and an achievable workflow.
To introduce the concept of version control with Git and Github, a separate git course website is available here.
The git course provides an introduction on main terminology of Git based on 5 important tasks:</description>
    </item>
    
    <item>
      <title>Undo a git commit</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_undo_commit/</link>
      <pubDate>Wed, 18 Oct 2017 15:31:53 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_undo_commit/</guid>
      <description>Introduction You notice you have done something wrong on your branch. No worries, erroneous commits can be undone or reverted.
First, check your history of commits to see which commits are the faulty ones.
git log --oneline Example output
b7119f2 Continue doing crazy things 872fa7e Try something crazy a1e8fb5 Make some important changes to hello.py 435b61d Create hello.py 9773e52 Initial import Git checkout The git checkout command serves three distinct functions: checking out files, checking out commits, and checking out branches.</description>
    </item>
    
    <item>
      <title>Git without internet</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_no_internet/</link>
      <pubDate>Wed, 18 Oct 2017 15:30:15 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_no_internet/</guid>
      <description>When working off line, two Git tasks cannot be performed: fetching/pulling updates from the server, and pushing changes to the server. All other commands still work.
One can commit changes, branch off, revert and reset changes, the same as when there exists an internet connection.
Example workflow: start offline mode
while(notBored): commit changes add files branch off new features end offline mode
update master branch
git fetch origin push changes to the server</description>
    </item>
    
    <item>
      <title>Git workflow using the command line</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_workflow/</link>
      <pubDate>Wed, 18 Oct 2017 14:42:43 +0200</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_workflow/</guid>
      <description>BEFORE I START WORKING   STEP 1: Update the master branch on my PC to make sure it is aligned with the remote master
git fetch origin git checkout master git merge --ff-only origin/master   STEP 2: Choose your option:
  OPTION 2A: I already have a branch I want to continue working on:
Switch to existing topic branch:
git checkout name_existing_branch git fetch origin git rebase origin/master   OPTION 2B: I&amp;rsquo;ll make a new branch to work with: Create a new topic branch from master(!</description>
    </item>
    
    <item>
      <title>Handle conflicts</title>
      <link>https://inbo.github.io/tutorials/tutorials/git_conflict/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://inbo.github.io/tutorials/tutorials/git_conflict/</guid>
      <description>Fix merge conflict with a pull request You have made some changes to a feature branch. Make a pull request on the server. The standard case of automatic merge is not possible. Push your latest changes from the feature branch to the server.
Locally on your computer:
git fetch origin Rebase your feature branch with your master
git rebase origin/master Git will now state that there are merge conflicts. These will look like this:</description>
    </item>
    
  </channel>
</rss>
